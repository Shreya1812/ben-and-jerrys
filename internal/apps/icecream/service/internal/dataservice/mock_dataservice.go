// Code generated by MockGen. DO NOT EDIT.
// Source: dataservice.go

// Package dataservice is a generated GoMock package.
package dataservice

import (
	context "context"
	model "github.com/Shreya1812/ben-and-jerrys/internal/apps/icecream/service/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIceCreamDataService is a mock of IceCreamDataService interface
type MockIceCreamDataService struct {
	ctrl     *gomock.Controller
	recorder *MockIceCreamDataServiceMockRecorder
}

// MockIceCreamDataServiceMockRecorder is the mock recorder for MockIceCreamDataService
type MockIceCreamDataServiceMockRecorder struct {
	mock *MockIceCreamDataService
}

// NewMockIceCreamDataService creates a new mock instance
func NewMockIceCreamDataService(ctrl *gomock.Controller) *MockIceCreamDataService {
	mock := &MockIceCreamDataService{ctrl: ctrl}
	mock.recorder = &MockIceCreamDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIceCreamDataService) EXPECT() *MockIceCreamDataServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m_2 *MockIceCreamDataService) Create(ctx context.Context, m *model.IceCream) (*model.IceCream, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, m)
	ret0, _ := ret[0].(*model.IceCream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockIceCreamDataServiceMockRecorder) Create(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIceCreamDataService)(nil).Create), ctx, m)
}

// Update mocks base method
func (m_2 *MockIceCreamDataService) Update(ctx context.Context, m *model.IceCream) (*model.IceCream, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(*model.IceCream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockIceCreamDataServiceMockRecorder) Update(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIceCreamDataService)(nil).Update), ctx, m)
}

// DeleteByProductId mocks base method
func (m *MockIceCreamDataService) DeleteByProductId(ctx context.Context, pId string) (*model.IceCream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByProductId", ctx, pId)
	ret0, _ := ret[0].(*model.IceCream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByProductId indicates an expected call of DeleteByProductId
func (mr *MockIceCreamDataServiceMockRecorder) DeleteByProductId(ctx, pId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByProductId", reflect.TypeOf((*MockIceCreamDataService)(nil).DeleteByProductId), ctx, pId)
}

// GetByProductId mocks base method
func (m *MockIceCreamDataService) GetByProductId(ctx context.Context, pId string) (*model.IceCream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProductId", ctx, pId)
	ret0, _ := ret[0].(*model.IceCream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProductId indicates an expected call of GetByProductId
func (mr *MockIceCreamDataServiceMockRecorder) GetByProductId(ctx, pId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProductId", reflect.TypeOf((*MockIceCreamDataService)(nil).GetByProductId), ctx, pId)
}

// GetList mocks base method
func (m *MockIceCreamDataService) GetList(ctx context.Context, options *model.IceCreamSearchOptions) (*model.IceCreamListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, options)
	ret0, _ := ret[0].(*model.IceCreamListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList
func (mr *MockIceCreamDataServiceMockRecorder) GetList(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockIceCreamDataService)(nil).GetList), ctx, options)
}

// Close mocks base method
func (m *MockIceCreamDataService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockIceCreamDataServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIceCreamDataService)(nil).Close))
}
